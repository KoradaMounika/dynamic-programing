class Graph():
    def __init__(self,vertices):
        self.v=vertices
        self.graph=[[0 for column in range(vertices)] for row in range (vertices)]
    def printsolution(self,dist):
        print("vertex \t distance from source")
        for node in range(self.v):
            print(node,"\t\t",dist[node])
    def minDistance(self,dist,sptset):
        min=1e7
        for v in range(self.v):
            if dist[v] < min and sptset[v]==False:
                min=dist[v]
                min_index=v
        return min_index
    def dijkstra(self,src):
        dist=[1e7]*self.v
        dist[src]=0
        sptset=[False]*self.v 
        for cout in range(self.v):
            u=self.minDistance(dist,sptset)
            sptset[u]=True
            for v in range(self.v):
                if(self.graph[u][v]>0 and sptset[v]==False and dist[v]>dist[u]+self.graph[u][v]):
                    dist[v]=dist[u]+self.graph[u][v]
        self.printsolution(dist)
g=Graph(6)
g.graph=[[0,4,4,0,0,0],[4,0,2,0,0,0],[4,2,0,3,1,6],[0,0,3,0,0,2],[0,0,1,0,0,3],[0,0,6,2,3,0]]
g.dijkstra(0)

